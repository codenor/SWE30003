@model ElectronicsStoreAss3.Models.Product.ProductSearchViewModel
@{
    ViewData["Title"] = "Product Catalogue";
}

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Search & Filter Sidebar -->
        <div class="col-lg-3 col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-funnel"></i> Search & Filter</h5>
                </div>
                <div class="card-body">
                    <form method="get" asp-action="Catalogue" id="filterForm">
                        <!-- Search -->
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-search"></i> Search</label>
                            <input type="text" class="form-control" name="SearchTerm" 
                                   value="@Model.SearchTerm" placeholder="Search products...">
                        </div>

                        <!-- Category -->
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-grid"></i> Category</label>
                            <select class="form-select" name="Category" id="categoryFilter">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category" selected="@(category == Model.Category)">
                                        @category
                                    </option>
                                }
                            </select>
                        </div>

                        <!-- Brand -->
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-tags"></i> Brand</label>
                            <select class="form-select" name="Brand" id="brandFilter">
                                <option value="">All Brands</option>
                                @foreach (var brand in Model.Brands)
                                {
                                    <option value="@brand" selected="@(brand == Model.Brand)">
                                        @brand
                                    </option>
                                }
                            </select>
                        </div>

                        <!-- Price Range -->
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-currency-dollar"></i> Price Range</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="number" class="form-control" name="MinPrice" 
                                           value="@Model.MinPrice" placeholder="Min $" step="50">
                                </div>
                                <div class="col-6">
                                    <input type="number" class="form-control" name="MaxPrice" 
                                           value="@Model.MaxPrice" placeholder="Max $" step="50">
                                </div>
                            </div>
                        </div>

                        <!-- Sort -->
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-sort-down"></i> Sort</label>
                            <select class="form-select" name="SortBy">
                                <option value="Name" selected="@(Model.SortBy == "Name")">Name</option>
                                <option value="Price" selected="@(Model.SortBy == "Price")">Price</option>
                                <option value="Category" selected="@(Model.SortBy == "Category")">Category</option>
                                <option value="Brand" selected="@(Model.SortBy == "Brand")">Brand</option>
                            </select>
                            <div class="mt-2">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="SortOrder" 
                                           value="ASC" id="sortAsc" checked="@(Model.SortOrder != "DESC")">
                                    <label class="form-check-label" for="sortAsc">A-Z</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="SortOrder" 
                                           value="DESC" id="sortDesc" checked="@(Model.SortOrder == "DESC")">
                                    <label class="form-check-label" for="sortDesc">Z-A</label>
                                </div>
                            </div>
                        </div>

                        <!-- Buttons -->
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-search"></i> Search
                            </button>
                            <a href="@Url.Action("Catalogue")" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle"></i> Clear
                            </a>
                        </div>

                        <!-- Results Info -->
                        <div class="mt-3 p-2 bg-light rounded">
                            <small>
                                <i class="bi bi-info-circle"></i> 
                                @Model.Products.Count of @Model.TotalProducts products
                            </small>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="col-lg-9 col-md-8">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <span>Results for "@Model.SearchTerm"</span>
                    }
                    else if (!string.IsNullOrEmpty(Model.Category))
                    {
                        <span>@Model.Category</span>
                    }
                    else
                    {
                        <span>All Products</span>
                    }
                    <small class="text-muted">(@Model.TotalProducts items)</small>
                </h2>
            </div>

            <!-- No Results -->
            @if (!Model.Products.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-search display-1 text-muted"></i>
                    <h4>No products found</h4>
                    <p class="text-muted">Try different search terms or clear filters.</p>
                    <a href="@Url.Action("Catalogue")" class="btn btn-primary">View All Products</a>
                </div>
            }
            else
            {
                <!-- Product Grid -->
                <div class="row">
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-xl-4 col-lg-6 mb-4">
                            <div class="card h-100">
                                @if (!string.IsNullOrEmpty(product.ImagePath))
                                {
                                    <img src="@product.ImagePath" class="card-img-top rounded p-4" alt="@product.Name" 
                                         style="max-height: 180px; max-width: 100%; object-fit: contain;">
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" 
                                         style="height: 200px;">
                                        <i class="bi bi-image text-muted" style="font-size: 2rem;"></i>
                                    </div>
                                }
                                
                                <div class="card-body d-flex flex-column">
                                    <div class="mb-2">
                                        <span class="badge bg-secondary">@product.Category</span>
                                        @if (!string.IsNullOrEmpty(product.Brand))
                                        {
                                            <span class="badge bg-outline-primary">@product.Brand</span>
                                        }
                                    </div>
                                    
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-text text-muted small">@product.Description</p>
                                    
                                    <!-- Stock -->
                                    <div class="mb-2">
                                        @if (product.IsInStock)
                                        {
                                            if (product.IsLowStock)
                                            {
                                                <span class="badge bg-warning">Low Stock (@product.StockLevel)</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">In Stock (@product.StockLevel)</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Out of Stock</span>
                                        }
                                    </div>
                                    
                                    <!-- Price & Actions -->
                                    <div class="mt-auto">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h4 class="text-primary mb-0">$@(product.Price.ToString("#,##0"))</h4>
                                            <small class="text-muted">@product.SKU</small>
                                        </div>
                                        
                                        @if (product.IsInStock)
                                        {
                                            <form method="post" asp-controller="ShoppingCart" asp-action="AddToCart" class="mb-2">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="productId" value="@product.ProductId" />
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
                                                
                                                <div class="input-group">
                                                    <span class="input-group-text">Qty:</span>
                                                    <input type="number" name="quantity" value="1" min="1" max="@product.StockLevel" 
                                                           class="form-control" style="max-width: 70px;" />
                                                    <button type="submit" class="btn btn-primary">
                                                        <i class="bi bi-cart-plus"></i>
                                                    </button>
                                                </div>
                                            </form>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary w-100 mb-2" disabled>
                                                <i class="bi bi-x-circle"></i> Out of Stock
                                            </button>
                                        }
                                        
                                        <a href="@Url.Action("Details", "Product", new { sku = product.SKU })" 
                                           class="btn btn-outline-secondary w-100 btn-sm">
                                            <i class="bi bi-eye"></i> Details
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav>
                        <ul class="pagination justify-content-center">
                            @if (Model.Page > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@GetPageUrl(Model.Page - 1)">Previous</a>
                                </li>
                            }
                            
                            @for (int i = Math.Max(1, Model.Page - 2); i <= Math.Min(Model.TotalPages, Model.Page + 2); i++)
                            {
                                <li class="page-item @(i == Model.Page ? "active" : "")">
                                    <a class="page-link" href="@GetPageUrl(i)">@i</a>
                                </li>
                            }
                            
                            @if (Model.Page < Model.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@GetPageUrl(Model.Page + 1)">Next</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@functions {
    string GetPageUrl(int page)
    {
        var routeValues = new RouteValueDictionary
        {
            { "SearchTerm", Model.SearchTerm },
            { "Category", Model.Category },
            { "Brand", Model.Brand },
            { "MinPrice", Model.MinPrice },
            { "MaxPrice", Model.MaxPrice },
            { "SortBy", Model.SortBy },
            { "SortOrder", Model.SortOrder },
            { "Page", page }
        };
        
        return Url.Action("Catalogue", "Product", routeValues);
    }
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('filterForm');
    const searchInput = document.querySelector('input[name="SearchTerm"]');
    
    // Auto-submit on filter changes (with debounce)
    let timeout;
    function autoSubmit() {
        clearTimeout(timeout);
        timeout = setTimeout(() => form.submit(), 800);
    }
    
    // Auto-submit on dropdown changes
    document.querySelectorAll('#categoryFilter, #brandFilter, select[name="SortBy"], input[name="SortOrder"]')
        .forEach(element => {
            element.addEventListener('change', autoSubmit);
        });
    
    // Auto-submit on search input (with longer delay)
    searchInput.addEventListener('input', function() {
        clearTimeout(timeout);
        timeout = setTimeout(() => form.submit(), 1200);
    });
    
    // Auto-submit on price inputs
    document.querySelectorAll('input[name="MinPrice"], input[name="MaxPrice"]')
        .forEach(input => {
            input.addEventListener('blur', autoSubmit);
        });
});
</script>
}