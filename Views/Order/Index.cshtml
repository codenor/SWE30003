@model IEnumerable<ElectronicsStoreAss3.Models.Order.Order>

@{
    ViewData["Title"] = "Orders Management";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="bi bi-bag"></i> Orders Management</h2>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <h4>No Orders Found</h4>
            <p>There are currently no orders in the system.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-striped">
                <thead class="table-dark">
                <tr>
                    <th>Order #</th>
                    <th>Date</th>
                    <th>Customer</th>
                    <th>Items</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Shipment</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var order in Model)
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                        <td>
                            @if (order.Customer != null)
                            {
                                @($"{order.Customer.FirstName} {order.Customer.LastName}")
                            }
                            else
                            {
                                <span class="text-muted">Guest Order</span>
                            }
                        </td>
                        <td>@order.TotalItems items</td>
                        <td>$@order.TotalAmount.ToString("F2")</td>
                        <td>
                                <span class="badge bg-@(GetStatusBadgeClass(order.Status))">
                                    @order.Status
                                </span>
                        </td>
                        <td>
                            @if (order.Shipment != null)
                            {
                                <a href="@Url.Action("Details", "Shipment", new { id = order.Shipment.ShipmentId })"
                                   class="badge bg-@(GetShipmentStatusBadgeClass(order.Shipment.Status)) text-decoration-none">
                                    @order.Shipment.Status
                                </a>
                            }
                            else
                            {
                                <span class="badge bg-secondary">No Shipment</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="@Url.Action("Details", "Order", new { id = order.OrderId })"
                                   class="btn btn-outline-primary">
                                    <i class="bi bi-eye"></i>
                                </a>
                                @if (order.CanBeCancelled())
                                {
                                    <button class="btn btn-outline-danger"
                                            data-bs-toggle="modal" data-bs-target="#cancelOrderModal"
                                            data-order-id="@order.OrderId"
                                            data-order-number="@order.OrderId">
                                        <i class="bi bi-x-circle"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }

    <!-- Cancel Order Modal -->
    <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                        <strong>Warning:</strong> This action cannot be undone.
                    </div>
                    <p>Are you sure you want to cancel Order #<span id="orderNumberToCancel"></span>?</p>
                    <p>Cancelling this order will:</p>
                    <ul>
                        <li>Return items to inventory</li>
                        <li>Cancel any associated shipments</li>
                        <li>Mark the order as "Cancelled"</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <form id="cancelOrderForm" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="orderIdToCancel" name="id" value=""/>
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-x-circle"></i> Cancel Order
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {

    public string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "warning",
            "Confirmed" => "info",
            "Processing" => "primary",
            "Completed" => "success",
            "Cancelled" => "danger",
            _ => "secondary"
        };
    }

    public string GetShipmentStatusBadgeClass(string status)
    {
        return status switch
        {
            "Processing" => "warning",
            "Shipped" => "info",
            "In Transit" => "primary",
            "Out for Delivery" => "primary",
            "Delivered" => "success",
            "Failed" => "danger",
            "Returned" => "secondary",
            _ => "secondary"
        };
    }

}

@section Scripts {
    <script>
        // Initialize the cancel order modal
        document.addEventListener('DOMContentLoaded', function () {
            var cancelOrderModal = document.getElementById('cancelOrderModal');
            if (cancelOrderModal) {
                cancelOrderModal.addEventListener('show.bs.modal', function (event) {
                    // Button that triggered the modal
                    var button = event.relatedTarget;

                    // Extract info from data-* attributes
                    var orderId = button.getAttribute('data-order-id');
                    var orderNumber = button.getAttribute('data-order-number');

                    // Update the modal's content
                    var orderIdInput = document.getElementById('orderIdToCancel');
                    var orderNumberSpan = document.getElementById('orderNumberToCancel');
                    var form = document.getElementById('cancelOrderForm');

                    orderIdInput.value = orderId;
                    orderNumberSpan.textContent = orderNumber;
                    form.action = '@Url.Action("Cancel", "Order")/' + orderId;
                });
            }
        });
    </script>
}

<!-- Hidden form for anti-forgery token -->
@Html.AntiForgeryToken() 