@model ElectronicsStoreAss3.Models.ShoppingCartViewModel

@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container">
    <h2>Shopping Cart</h2>
    
    @if (Model.IsEmpty)
    {
        <div class="alert alert-info">
            <h4>Your cart is empty</h4>
            <p><a href="/Product" class="btn btn-primary">Continue Shopping</a></p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Total</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.CartItems)
                        {
                            <tr data-cart-item-id="@item.ShoppingCartItemId">
                                <td>
                                    @if (!string.IsNullOrEmpty(item.ProductImagePath))
                                    {
                                        <img src="@item.ProductImagePath" alt="@item.ProductName" style="width: 50px; height: 50px;" />
                                    }
                                    <div>
                                        <strong>@item.ProductName</strong><br/>
                                        <small>SKU: @item.ProductSKU</small><br/>
                                        <small class="text-muted">Stock: @item.ProductStockLevel</small>
                                    </div>
                                </td>
                                <td>$@item.UnitPrice.ToString("F2")</td>
                                <td>
                                    <div class="input-group" style="width: 120px;">
                                        <button class="btn btn-outline-secondary btn-sm quantity-minus" type="button">-</button>
                                        <input type="number" class="form-control form-control-sm quantity-input" 
                                               value="@item.Quantity" min="1" max="@item.ProductStockLevel" 
                                               data-cart-item-id="@item.ShoppingCartItemId">
                                        <button class="btn btn-outline-secondary btn-sm quantity-plus" type="button">+</button>
                                    </div>
                                    @if (!item.IsQuantityAvailable)
                                    {
                                        <small class="text-danger">Insufficient stock</small>
                                    }
                                </td>
                                <td>$@item.TotalPrice.ToString("F2")</td>
                                <td>
                                    <button class="btn btn-danger btn-sm remove-item" data-cart-item-id="@item.ShoppingCartItemId">
                                        Remove
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Order Summary</h5>
                        <div class="d-flex justify-content-between">
                            <span>Subtotal:</span>
                            <span>$@Model.SubTotal.ToString("F2")</span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span>GST (10%):</span>
                            <span>$@Model.GST.ToString("F2")</span>
                        </div>
                        @if (Model.ShippingFee > 0)
                        {
                            <div class="d-flex justify-content-between">
                                <span>Shipping:</span>
                                <span>$@Model.ShippingFee.ToString("F2")</span>
                            </div>
                        }
                        <hr>
                        <div class="d-flex justify-content-between">
                            <strong>Total: $@Model.GrandTotal.ToString("F2")</strong>
                        </div>
                        <div class="mt-3">
                            <button class="btn btn-success btn-block w-100 mb-2">Proceed to Checkout</button>
                            <button class="btn btn-outline-danger btn-block w-100 clear-cart">Clear Cart</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
    // Add to cart functionality (for testing)
    function addToCart(productId, quantity = 1) {
        fetch('/ShoppingCart/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
                quantity: quantity
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Product added to cart!');
                location.reload();
            } else {
                alert('Failed to add product: ' + data.message);
            }
        });
    }

    // Update quantity
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', function() {
            const cartItemId = this.dataset.cartItemId;
            const quantity = parseInt(this.value);
            
            fetch('/ShoppingCart/UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    cartItemId: cartItemId,
                    quantity: quantity
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to update quantity: ' + data.message);
                }
            });
        });
    });

    // Quantity buttons
    document.querySelectorAll('.quantity-plus').forEach(button => {
        button.addEventListener('click', function() {
            const input = this.previousElementSibling;
            const max = parseInt(input.getAttribute('max'));
            const current = parseInt(input.value);
            if (current < max) {
                input.value = current + 1;
                input.dispatchEvent(new Event('change'));
            }
        });
    });

    document.querySelectorAll('.quantity-minus').forEach(button => {
        button.addEventListener('click', function() {
            const input = this.nextElementSibling;
            const current = parseInt(input.value);
            if (current > 1) {
                input.value = current - 1;
                input.dispatchEvent(new Event('change'));
            }
        });
    });

    // Remove item
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
            const cartItemId = this.dataset.cartItemId;
            
            if (confirm('Remove this item from cart?')) {
                fetch('/ShoppingCart/RemoveItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'cartItemId=' + cartItemId
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Failed to remove item: ' + data.message);
                    }
                });
            }
        });
    });

    // Clear cart
    document.querySelector('.clear-cart')?.addEventListener('click', function() {
        if (confirm('Clear entire cart?')) {
            fetch('/ShoppingCart/ClearCart', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to clear cart: ' + data.message);
                }
            });
        }
    });
</script>
}