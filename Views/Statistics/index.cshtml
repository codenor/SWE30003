@model ElectronicsStoreAss3.Models.Statistics.StatisticsViewModel

@{
ViewData["Title"] = "Sales Statistics";
Layout = "~/Views/Shared/_AccountLayout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="bi bi-graph-up"></i> Sales Statistics</h2>

    <!-- Time Frame Selector -->
    <div class="btn-group" role="group">
        @foreach (var option in ViewBag.TimeFrameOptions)
        {
            <a href="@(option.Key == "custom" ? "#" : Url.Action("Index", new { timeFrame = option.Key }))"
               class="btn @(Model.TimeFrame == option.Key ? "btn-primary" : "btn-outline-primary") @(option.Key == "custom" ? "custom-range-btn" : "")"
               data-timeframe="@option.Key">
                @option.Value
            </a>
        }
    </div>
</div>

<!-- Period Display -->
<div class="mb-3">
    <small class="text-muted">
        <i class="bi bi-calendar-range"></i>
        Showing data from @Model.FromDate.ToString("MMM dd, yyyy") to @Model.ToDate.ToString("MMM dd, yyyy")
    </small>
</div>

<!-- Custom Date Range Modal -->
<div class="modal fade" id="customRangeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Custom Date Range</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="get" asp-action="Custom">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">From Date</label>
                            <input type="date" name="fromDate" class="form-control" value="@Model.FromDate.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">To Date</label>
                            <input type="date" name="toDate" class="form-control" value="@Model.ToDate.ToString("yyyy-MM-dd")" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Apply Range</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Overview Cards -->
<div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card border-primary">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title text-primary">Total Revenue</h6>
                        <h3 class="mb-0">$@Model.SalesOverview.TotalRevenue.ToString("N0")</h3>
                        @if (Model.SalesOverview.RevenueGrowth != 0)
                        {
                        <small class="text-@(Model.SalesOverview.RevenueGrowth > 0 ? "success" : "danger")">
                            <i class="bi bi-arrow-@(Model.SalesOverview.RevenueGrowth > 0 ? "up" : "down")"></i>
                            @Math.Abs(Model.SalesOverview.RevenueGrowth).ToString("F1")%
                        </small>
                        }
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-currency-dollar text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card border-success">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title text-success">Total Orders</h6>
                        <h3 class="mb-0">@Model.SalesOverview.TotalOrders.ToString("N0")</h3>
                        @if (Model.SalesOverview.OrderGrowth != 0)
                        {
                        <small class="text-@(Model.SalesOverview.OrderGrowth > 0 ? "success" : "danger")">
                            <i class="bi bi-arrow-@(Model.SalesOverview.OrderGrowth > 0 ? "up" : "down")"></i>
                            @Math.Abs(Model.SalesOverview.OrderGrowth).ToString("F1")%
                        </small>
                        }
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-bag-check text-success" style="font-size: 2rem;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card border-info">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title text-info">Avg Order Value</h6>
                        <h3 class="mb-0">$@Model.SalesOverview.AverageOrderValue.ToString("N0")</h3>
                        <small class="text-muted">Per order</small>
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-calculator text-info" style="font-size: 2rem;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-3">
        <div class="card border-warning">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title text-warning">Items Sold</h6>
                        <h3 class="mb-0">@Model.SalesOverview.TotalItemsSold.ToString("N0")</h3>
                        <small class="text-muted">Total units</small>
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-box text-warning" style="font-size: 2rem;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="row mb-4">
    <!-- Daily Sales Chart -->
    <div class="col-xl-8 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="bi bi-graph-up"></i> Daily Sales Trend</h5>
            </div>
            <div class="card-body">
                <canvas id="dailySalesChart" height="100"></canvas>
            </div>
        </div>
    </div>

    <!-- Category Performance -->
    <div class="col-xl-4 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="bi bi-pie-chart"></i> Category Performance</h5>
            </div>
            <div class="card-body">
                <canvas id="categoryChart" height="200"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Top Products and Categories -->
<div class="row">
    <!-- Top Products -->
    <div class="col-xl-8 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="bi bi-star"></i> Top Performing Products</h5>
            </div>
            <div class="card-body">
                @if (Model.TopProducts.Any())
                {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Quantity Sold</th>
                            <th>Revenue</th>
                            <th>Avg Price</th>
                        </tr>
                        </thead>
                        <tbody>
                        @{ int rank = 1; }
                        @foreach (var product in Model.TopProducts.Take(10))
                        {
                        <tr>
                            <td>
                                            <span class="badge bg-@(rank <= 3 ? "warning" : "secondary")">
                                                #@rank
                                            </span>
                            </td>
                            <td>
                                <strong>@product.ProductName</strong>
                                <br />
                                <small class="text-muted">@product.SKU</small>
                            </td>
                            <td>
                                <span class="badge bg-secondary">@product.Category</span>
                            </td>
                            <td>@product.QuantitySold</td>
                            <td>$@product.Revenue.ToString("N2")</td>
                            <td>$@product.AveragePrice.ToString("N2")</td>
                        </tr>
                        rank++;
                        }
                        </tbody>
                    </table>
                </div>
                }
                else
                {
                <div class="text-center py-4">
                    <i class="bi bi-bar-chart display-4 text-muted"></i>
                    <p class="text-muted mt-2">No sales data available for the selected period</p>
                </div>
                }
            </div>
        </div>
    </div>

    <!-- Category Summary -->
    <div class="col-xl-4 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="bi bi-grid"></i> Category Summary</h5>
            </div>
            <div class="card-body">
                @if (Model.CategoryPerformance.Any())
                {
                @foreach (var category in Model.CategoryPerformance.Take(5))
                {
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div>
                        <h6 class="mb-1">@category.Category</h6>
                        <small class="text-muted">@category.ProductCount products • @category.QuantitySold units sold</small>
                    </div>
                    <div class="text-end">
                        <strong>$@category.Revenue.ToString("N0")</strong>
                        <br />
                        <small class="text-muted">@category.MarketShare.ToString("F1")% share</small>
                    </div>
                </div>
                <div class="progress mb-3" style="height: 6px;">
                    <div class="progress-bar" style="width: @category.MarketShare%"></div>
                </div>
                }
                }
                else
                {
                <div class="text-center py-4">
                    <i class="bi bi-pie-chart display-4 text-muted"></i>
                    <p class="text-muted mt-2">No category data available</p>
                </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Monthly Trend -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5><i class="bi bi-calendar3"></i> Monthly Sales Trend (Last 12 Months)</h5>
            </div>
            <div class="card-body">
                <canvas id="monthlySalesChart" height="80"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Daily Sales Chart
        const dailyCtx = document.getElementById('dailySalesChart').getContext('2d');
        const dailyData = @Html.Raw(Json.Serialize(Model.DailySales.Select(d => new {
        date = d.Date.ToString("MMM dd"),
        revenue = d.Revenue,
        orders = d.OrderCount
        })));

        new Chart(dailyCtx, {
            type: 'line',
            data: {
                labels: dailyData.map(d => d.date),
                datasets: [{
                    label: 'Revenue ($)',
                    data: dailyData.map(d => d.revenue),
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.1)',
                    tension: 0.1,
                    yAxisID: 'y',
                    fill: true
                }, {
                    label: 'Orders',
                    data: dailyData.map(d => d.orders),
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.1)',
                    tension: 0.1,
                    yAxisID: 'y1',
                    fill: false
                }]
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: { display: true, text: 'Revenue ($)' }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: { display: true, text: 'Orders' },
                        grid: { drawOnChartArea: false }
                    }
                },
                plugins: {
                    legend: { position: 'top' },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                if (context.datasetIndex === 0) {
                                    return 'Revenue: $' + context.raw.toLocaleString();
                                } else {
                                    return 'Orders: ' + context.raw;
                                }
                            }
                        }
                    }
                }
            }
        });

        // Category Performance Chart
        const categoryCtx = document.getElementById('categoryChart').getContext('2d');
        const categoryData = @Html.Raw(Json.Serialize(Model.CategoryPerformance.Select(c => new {
        category = c.Category,
        revenue = c.Revenue
        })));

        new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: categoryData.map(c => c.category),
                datasets: [{
                    data: categoryData.map(c => c.revenue),
                    backgroundColor: [
                        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                        '#9966FF', '#FF9F40', '#FF6B6B', '#4ECDC4',
                        '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return context.label + ': $' + context.raw.toLocaleString() + ' (' + percentage + '%)';
                            }
                        }
                    }
                }
            }
        });

        // Monthly Sales Chart
        const monthlyCtx = document.getElementById('monthlySalesChart').getContext('2d');
        const monthlyData = @Html.Raw(Json.Serialize(Model.MonthlySales.Select(m => new {
        month = m.MonthName,
        revenue = m.Revenue,
        orders = m.OrderCount
        })));

        new Chart(monthlyCtx, {
            type: 'bar',
            data: {
                labels: monthlyData.map(m => m.month),
                datasets: [{
                    label: 'Revenue ($)',
                    data: monthlyData.map(m => m.revenue),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 2,
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Revenue: $' + context.raw.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Revenue ($)'
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Month'
                        }
                    }
                }
            }
        });

        // Custom range modal
        document.querySelector('.custom-range-btn').addEventListener('click', function(e) {
            e.preventDefault();
            new bootstrap.Modal(document.getElementById('customRangeModal')).show();
        });

        // Auto-refresh data every 5 minutes (optional)
         setInterval(function() {
             location.reload();
             }, 300000);
    });
</script>
}