@model IEnumerable<ElectronicsStoreAss3.Models.Shipment>

@{
    ViewData["Title"] = "My Shipments";
    int pageSize = ViewBag.PageSize ?? 4;
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalItems = Model.Count();
    int totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    var paginatedShipments = Model.Skip((currentPage - 1) * pageSize).Take(pageSize);
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="bi bi-truck"></i> My Shipments</h2>
        <a href="@Url.Action("Orders", "Account")" class="btn btn-outline-primary">
            <i class="bi bi-bag-check"></i> View All Orders
        </a>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            <h4>No Shipments Found</h4>
            <p>You don't have any shipments yet. Place an order to track your deliveries!</p>
            <a href="@Url.Action("Catalogue", "Product")" class="btn btn-primary">
                <i class="bi bi-shop"></i> Start Shopping
            </a>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col-md-6">
                <p class="text-muted mb-0">
                    <i class="bi bi-info-circle"></i> Showing shipments from all your orders
                </p>
            </div>
            <div class="col-md-6 text-end">
                <div class="d-inline-flex align-items-center">
                    <label for="pageSize" class="me-2 form-label mb-0">Items per page:</label>
                    <select id="pageSize" class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                        <option value="4" selected="@(pageSize == 4)">4</option>
                        <option value="8" selected="@(pageSize == 8)">8</option>
                        <option value="12" selected="@(pageSize == 12)">12</option>
                        <option value="16" selected="@(pageSize == 16)">16</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row my-5">
            @foreach (var shipment in paginatedShipments)
            {
                <div class="col-lg-6 mb-4">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0">Order #@shipment.OrderId</h5>
                                <small class="text-muted">
                                    Ordered: @shipment.Order.OrderDate.ToString("MMM dd, yyyy")
                                </small>
                            </div>
                            <span class="badge bg-@(GetShipmentStatusBadgeClass(shipment.Status)) fs-6">
                                @shipment.Status
                            </span>
                        </div>
                        <div class="card-body">
                            <!-- Tracking Information -->
                            <div class="mb-3">
                                <h6><i class="bi bi-geo-alt"></i> Tracking Information</h6>
                                <p class="mb-1">
                                    <strong>Tracking Number:</strong> 
                                    <code>@shipment.TrackingNumber</code>
                                </p>
                                <p class="mb-1">
                                    <strong>Carrier:</strong> @shipment.CarrierName
                                </p>
                                <p class="mb-0">
                                    <strong>Est. Delivery:</strong> 
                                    @shipment.EstimatedDeliveryDate.ToString("MMMM dd, yyyy")
                                    @if (shipment.EstimatedDeliveryDate.Date < DateTime.Today && shipment.Status != "Delivered")
                                    {
                                        <span class="badge bg-warning ms-1">Overdue</span>
                                    }
                                </p>
                            </div>

                            <!-- Delivery Status -->
                            <div class="mb-3">
                                <h6><i class="bi bi-clock-history"></i> Delivery Progress</h6>
                                <div class="progress-container">
                                    @{
                                        var statuses = new[] { "Processing", "Shipped", "In Transit", "Out for Delivery", "Delivered" };
                                        var currentIndex = Array.IndexOf(statuses, shipment.Status);
                                        if (currentIndex == -1) currentIndex = 0;
                                    }
                                    
                                    <div class="row text-center">
                                        @for (int i = 0; i < statuses.Length; i++)
                                        {
                                            <div class="col">
                                                <div class="status-indicator @(i <= currentIndex ? "completed" : "pending")">
                                                    @if (i <= currentIndex)
                                                    {
                                                        <i class="bi bi-check-circle-fill"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-circle"></i>
                                                    }
                                                </div>
                                                <small class="d-block mt-1">@statuses[i]</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Order Items Preview -->
                            <div class="mb-3">
                                <h6><i class="bi bi-box"></i> Items (@shipment.Order.TotalItems)</h6>
                                <div class="d-flex flex-wrap">
                                    @foreach (var item in shipment.Order.OrderItems.Take(3))
                                    {
                                        <div class="me-2 mb-2">
                                            @if (!string.IsNullOrEmpty(item.Product.ImagePath))
                                            {
                                                <img src="@item.Product.ImagePath" alt="@item.Product.Name" 
                                                     class="rounded border" style="width: 50px; height: 50px; object-fit: cover;"
                                                     title="@item.Product.Name (x@item.Quantity)" />
                                            }
                                            else
                                            {
                                                <div class="bg-light rounded border d-flex align-items-center justify-content-center" 
                                                     style="width: 50px; height: 50px;" title="@item.Product.Name (x@item.Quantity)">
                                                    <i class="bi bi-image text-muted"></i>
                                                </div>
                                            }
                                        </div>
                                    }
                                    @if (shipment.Order.OrderItems.Count() > 3)
                                    {
                                        <div class="d-flex align-items-center">
                                            <span class="badge bg-secondary">+@(shipment.Order.OrderItems.Count() - 3) more</span>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Shipping Address -->
                            @if (!string.IsNullOrEmpty(shipment.ShippingAddress))
                            {
                                <div class="mb-3">
                                    <h6><i class="bi bi-house-door"></i> Shipping To</h6>
                                    <address class="mb-0">
                                        @Html.Raw(shipment.ShippingAddress.Replace("\n", "<br/>"))
                                    </address>
                                </div>
                            }

                            <!-- Order Total -->
                            <div class="d-flex justify-content-between align-items-center">
                                <span><strong>Order Total:</strong></span>
                                <span class="h5 text-primary mb-0">$@shipment.Order.TotalAmount.ToString("F2")</span>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-grid gap-2 d-md-flex justify-content-md-between">
                                <a href="@Url.Action("Track", "Shipment", new { trackingNumber = shipment.TrackingNumber })" 
                                   class="btn btn-primary btn-sm">
                                    <i class="bi bi-search"></i> Track Package
                                </a>
                                <div>
                                    <a href="@Url.Action("Details", "Order", new { id = shipment.OrderId })" 
                                       class="btn btn-outline-secondary btn-sm">
                                        <i class="bi bi-eye"></i> Order Details
                                    </a>
                                    @if (shipment.Order.IsCompleted())
                                    {
                                        <button class="btn btn-outline-success btn-sm" onclick="reorder(@shipment.OrderId)">
                                            <i class="bi bi-arrow-repeat"></i> Reorder
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <nav aria-label="Shipment pagination">
                <ul class="pagination justify-content-center">
                    <!-- First page -->
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("MyShipments", new { page = 1, pageSize })" aria-label="First">
                            <span aria-hidden="true">&laquo;&laquo;</span>
                        </a>
                    </li>
                    
                    <!-- Previous page -->
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("MyShipments", new { page = currentPage - 1, pageSize })" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    
                    @{
                        const int maxPagesToShow = 5;
                        int startPage = Math.Max(1, currentPage - (maxPagesToShow / 2));
                        int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
                        
                        // Adjust start page if we're near the end
                        if (endPage - startPage + 1 < maxPagesToShow)
                        {
                            startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                        }
                        
                        // Show ellipsis for the first part if needed
                        if (startPage > 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("MyShipments", new { page = i, pageSize })">@i</a>
                        </li>
                    }
                    
                    @if (endPage < totalPages)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    
                    <!-- Next page -->
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("MyShipments", new { page = currentPage + 1, pageSize })" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                    
                    <!-- Last page -->
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("MyShipments", new { page = totalPages, pageSize })" aria-label="Last">
                            <span aria-hidden="true">&raquo;&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
            <p class="text-center text-muted small">
                Showing @((currentPage - 1) * pageSize + (totalItems == 0 ? 0 : 1))-@(Math.Min(currentPage * pageSize, totalItems)) of @totalItems shipments
            </p>
        }

        <!-- Shipment Statistics -->
        <div class="row mt-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-warning">In Transit</h5>
                        <h2 class="display-6">@Model.Count(s => s.Status == "In Transit" || s.Status == "Shipped")</h2>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-success">Delivered</h5>
                        <h2 class="display-6">@Model.Count(s => s.Status == "Delivered")</h2>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-info">Processing</h5>
                        <h2 class="display-6">@Model.Count(s => s.Status == "Processing")</h2>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-primary">Total Orders</h5>
                        <h2 class="display-6">@Model.Count()</h2>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@functions {
    public string GetShipmentStatusBadgeClass(string status)
    {
        return status switch
        {
            "Processing" => "warning",
            "Shipped" => "info",
            "In Transit" => "primary",
            "Out for Delivery" => "primary",
            "Delivered" => "success",
            "Failed" => "danger",
            "Returned" => "secondary",
            _ => "secondary"
        };
    }
}

@section Scripts {
<script>
function reorder(orderId) {
    if (confirm('Add all items from this order to your cart?')) {
        alert(`Items from Order #${orderId} have been added to your cart!`);
        // In a real app, you'd make an AJAX call to add items to cart
        // Example:
        // fetch('/ShoppingCart/ReorderFromOrder', {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify({ orderId: orderId })
        // }).then(response => {
        //     if (response.ok) {
        //         window.location.href = '/ShoppingCart';
        //     }
        // });
    }
}

function changePageSize(size) {
    window.location.href = '@Url.Action("MyShipments")?page=1&pageSize=' + size;
}
</script>

<style>
.status-indicator {
    font-size: 1.2rem;
}

.status-indicator.completed {
    color: #28a745;
}

.status-indicator.pending {
    color: #dee2e6;
}

.progress-container {
    padding: 1rem 0;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

/* Pagination Styling */
.pagination {
    margin-top: 2rem;
    margin-bottom: 1rem;
}

.pagination .page-item .page-link {
    color: #0d6efd;
    background-color: #fff;
    border-color: #dee2e6;
    transition: all 0.2s ease-in-out;
}

.pagination .page-item.active .page-link {
    background-color: #0d6efd;
    border-color: #0d6efd;
    color: white;
    font-weight: bold;
}

.pagination .page-item.disabled .page-link {
    color: #6c757d;
    pointer-events: none;
    background-color: #fff;
    border-color: #dee2e6;
}

.pagination .page-link:hover {
    background-color: #e9ecef;
    border-color: #dee2e6;
    color: #0a58ca;
}

.pagination .page-link:focus {
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    z-index: 3;
}
</style>
}