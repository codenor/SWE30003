// <auto-generated />
using System;
using ElectronicsStoreAss3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectronicsStoreAss3.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250601140900_AddShoppingCart")]
    partial class AddShoppingCart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Catalogue", b =>
                {
                    b.Property<int>("CatalogueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CatalogueId");

                    b.ToTable("Catalogues");

                    b.HasData(
                        new
                        {
                            CatalogueId = 1,
                            CreatedDate = new DateTime(2025, 6, 2, 0, 9, 0, 4, DateTimeKind.Local).AddTicks(7611),
                            Description = "All electronic products",
                            IsActive = true,
                            Name = "Electronics"
                        });
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventory");

                    b.HasData(
                        new
                        {
                            InventoryId = 1,
                            LastUpdated = new DateTime(2025, 6, 2, 0, 9, 0, 4, DateTimeKind.Local).AddTicks(5298),
                            LowStockThreshold = 5,
                            ProductId = 1,
                            StockLevel = 10
                        },
                        new
                        {
                            InventoryId = 2,
                            LastUpdated = new DateTime(2025, 6, 2, 0, 9, 0, 4, DateTimeKind.Local).AddTicks(5570),
                            LowStockThreshold = 5,
                            ProductId = 2,
                            StockLevel = 15
                        },
                        new
                        {
                            InventoryId = 3,
                            LastUpdated = new DateTime(2025, 6, 2, 0, 9, 0, 4, DateTimeKind.Local).AddTicks(5574),
                            LowStockThreshold = 2,
                            ProductId = 3,
                            StockLevel = 5
                        });
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CatalogueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specifications")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Smartphones",
                            CreatedDate = new DateTime(2025, 6, 2, 0, 9, 0, 3, DateTimeKind.Local).AddTicks(9557),
                            Description = "Latest iPhone",
                            IsActive = true,
                            LastModified = new DateTime(2025, 6, 2, 0, 9, 0, 3, DateTimeKind.Local).AddTicks(9693),
                            Name = "iPhone 15",
                            Price = 999.99m,
                            SKU = "IPH15"
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Smartphones",
                            CreatedDate = new DateTime(2025, 6, 2, 0, 9, 0, 3, DateTimeKind.Local).AddTicks(9818),
                            Description = "Android flagship",
                            IsActive = true,
                            LastModified = new DateTime(2025, 6, 2, 0, 9, 0, 3, DateTimeKind.Local).AddTicks(9819),
                            Name = "Samsung Galaxy S24",
                            Price = 899.99m,
                            SKU = "SGS24"
                        },
                        new
                        {
                            ProductId = 3,
                            Category = "Laptops",
                            CreatedDate = new DateTime(2025, 6, 2, 0, 9, 0, 3, DateTimeKind.Local).AddTicks(9823),
                            Description = "Professional laptop",
                            IsActive = true,
                            LastModified = new DateTime(2025, 6, 2, 0, 9, 0, 3, DateTimeKind.Local).AddTicks(9824),
                            Name = "MacBook Pro",
                            Price = 1999.99m,
                            SKU = "MBP14"
                        });
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SessionId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Customer", b =>
                {
                    b.HasOne("ElectronicsStoreAss3.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("ElectronicsStoreAss3.Models.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Inventory", b =>
                {
                    b.HasOne("ElectronicsStoreAss3.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("ElectronicsStoreAss3.Models.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Product", b =>
                {
                    b.HasOne("ElectronicsStoreAss3.Models.Catalogue", "Catalogue")
                        .WithMany("Products")
                        .HasForeignKey("CatalogueId");

                    b.Navigation("Catalogue");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.ShoppingCart", b =>
                {
                    b.HasOne("ElectronicsStoreAss3.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("ElectronicsStoreAss3.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElectronicsStoreAss3.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Account", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Catalogue", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.Product", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ElectronicsStoreAss3.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
